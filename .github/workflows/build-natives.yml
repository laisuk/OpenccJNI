name: Build OpenccWrapper natives

on:
  push:
    tags:
      - 'v*'     # e.g. v1.0.0-beta1
  workflow_dispatch:

permissions:
  contents: read

env:
  # JNI sources (*.cpp, *.h, *.java are together here)
  CPP_SRC: openccjni/src/main/java/opencc/OpenccWrapper.cpp
  JAVA_SRC_CLASS: openccjni/src/main/java/opencc/OpenccWrapper.java

  # Include directory for headers (you said .h is in the same opencc/ dir)
  CAPI_INCLUDE: openccjni/src/main/java/opencc

  # Prebuilt CAPI library locations inside resources
  LINUX_LIB_DIR: openccjni/src/main/resources/opencc/natives/linux-x86_64
  MACOS_ARM64_LIB_DIR: openccjni/src/main/resources/opencc/natives/macos-aarch64

  # Exact filenames weâ€™ll link against (avoid -l<name> ambiguity)
  LINUX_CAPI_FILE: libopencc_fmmseg_capi.so
  MACOS_CAPI_FILE: libopencc_fmmseg_capi.dylib

jobs:
  linux:
    name: Linux x86_64 .so
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Install build tools
        run: sudo apt-get update && sudo apt-get install -y build-essential

      - name: Show tree for sanity
        run: |
          ls -la .
          ls -la openccjni/src/main/java/opencc || true
          ls -la "${{ env.LINUX_LIB_DIR }}" || true

      - name: Generate JNI header (optional)
        run: |
          javac -h . "${{ env.JAVA_SRC_CLASS }}"

      - name: Build libOpenccWrapper.so
        run: |
          test -f "${{ env.LINUX_LIB_DIR }}/${{ env.LINUX_CAPI_FILE }}" || (echo "Missing CAPI at ${{ env.LINUX_LIB_DIR }}/${{ env.LINUX_CAPI_FILE }}" && exit 1)
          mkdir -p build/linux-x86_64
          g++ -shared -fPIC -O2 -std=c++17 \
            -o build/linux-x86_64/libOpenccWrapper.so \
            "${{ env.CPP_SRC }}" \
            -I . \
            -I "${JAVA_HOME}/include" \
            -I "${JAVA_HOME}/include/linux" \
            -I "${{ env.CAPI_INCLUDE }}" \
            -L "${{ env.LINUX_LIB_DIR }}" -Wl,-rpath,'$ORIGIN' \
            -Wl,-rpath,'$ORIGIN/.' \
            -Wl,--no-as-needed -l:"${{ env.LINUX_CAPI_FILE }}"
          file build/linux-x86_64/libOpenccWrapper.so

      - name: Upload artifact (Linux .so)
        uses: actions/upload-artifact@v4
        with:
          name: OpenccWrapper-linux-x86_64
          path: build/linux-x86_64/libOpenccWrapper.so
          if-no-files-found: error

  macos_arm64:
    name: macOS arm64 .dylib
    runs-on: macos-14  # Apple Silicon
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Show tree for sanity
        run: |
          ls -la .
          ls -la openccjni/src/main/java/opencc || true
          ls -la "${{ env.MACOS_ARM64_LIB_DIR }}" || true

      - name: Generate JNI header (optional)
        run: |
          javac -h . "${{ env.JAVA_SRC_CLASS }}"

      - name: Build libOpenccWrapper.dylib
        run: |
          test -f "${{ env.MACOS_ARM64_LIB_DIR }}/${{ env.MACOS_CAPI_FILE }}" || (echo "Missing CAPI at ${{ env.MACOS_ARM64_LIB_DIR }}/${{ env.MACOS_CAPI_FILE }}" && exit 1)
          mkdir -p build/macos-arm64
          clang++ -shared -fPIC -O2 -std=c++17 \
            -o build/macos-arm64/libOpenccWrapper.dylib \
            "${{ env.CPP_SRC }}" \
            -I . \
            -I "${JAVA_HOME}/include" \
            -I "${JAVA_HOME}/include/darwin" \
            -I "${{ env.CAPI_INCLUDE }}" \
            -L "${{ env.MACOS_ARM64_LIB_DIR }}" \
            -Wl,-rpath,@loader_path \
            -Wl,-rpath,@loader_path/. \
            -l:"${{ env.MACOS_CAPI_FILE }}"
          file build/macos-arm64/libOpenccWrapper.dylib

      - name: Upload artifact (macOS .dylib)
        uses: actions/upload-artifact@v4
        with:
          name: OpenccWrapper-macos-arm64
          path: build/macos-arm64/libOpenccWrapper.dylib
          if-no-files-found: error

  windows_collect:
    name: Windows x64 DLL (prebuilt)
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Verify prebuilt DLL exists
        shell: bash
        run: |
          DLL_PATH="openccjni/src/main/resources/opencc/natives/windows-x86_64/OpenccWrapper.dll"
          if [[ ! -f "$DLL_PATH" ]]; then
            echo "Prebuilt DLL not found at $DLL_PATH"
            exit 1
          fi
          ls -la "$(dirname "$DLL_PATH")"
          echo "Found $DLL_PATH"

      - name: Upload artifact (Windows .dll)
        uses: actions/upload-artifact@v4
        with:
          name: OpenccWrapper-windows-x86_64
          path: openccjni/src/main/resources/opencc/natives/windows-x86_64/OpenccWrapper.dll
          if-no-files-found: error
